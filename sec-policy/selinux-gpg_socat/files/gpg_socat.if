#### <summary>gpg_socat policy</summary>
#### <desc>
####	<p>
####	  Policy for socat daemon implementing Unix-over-Qubes-RPC
####	  tunnel.
####	</p>
#### </desc>


###############################
### <summary>
###	Create gpg_socat_socket_var_run_t
### </summary>
### <param name="domain">
###	<summary>
###	  Domain to permit.
###	</summary>
### </param>

interface(`gpg_socat_create_gpg_socat_socket_var_run_dir',`

	# todo: Figure out how to define interfaces in templates

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`

			type gpg_socat_socket_var_run_t;
		')

		socat_qrexec_search_socat_qrexec_var_run($1)
		filetrans_add_pattern($1, socat_qrexec_var_run_t, socat_qrexec_var_run_t, dir, "gpg")
		allow $1 socat_qrexec_var_run_t : dir create;
	')
')


###############################
### <summary>
###	getattr and setattr gpg_socat_socket_var_run_t
### </summary>
### <param name="domain">
###	<summary>
###	  Domain to permit.
###	</summary>
### </param>

interface(`gpg_socat_setattr_gpg_socat_socket_var_run_dir',`

	# todo: Figure out how to define interfaces in templates

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`

			type gpg_socat_socket_var_run_t;
		')

		socat_qrexec_search_socat_qrexec_var_run($1)
		allow $1 gpg_socat_socket_var_run_t : dir { getattr setattr };
	')
')


###############################
### <summary>
###	Connect, read, and write gpg_socat_socket_var_run_t
### </summary>
### <param name="prefix">
###	<summary>
###	  Domain to permit use.
###	</summary>
### </param>

interface(`gpg_socat_rw_gpg_socat_socket_var_run_sock_files',`

	# todo: Figure out how to define interfaces in templates

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`
	
			type gpg_socat_socket_var_run_t;
			type gpg_socat_t;
		')
	
	
		########################################
		#
		# $1 policy
		#
	
		socat_qrexec_search_socat_qrexec_var_run($1)
		rw_sock_files_pattern($1, gpg_socat_socket_var_run_t, gpg_socat_socket_var_run_t)
		allow $1 gpg_socat_t : unix_stream_socket connectto;
	')
')


###############################
### <summary>
###	<p>
###	  Create sock_files in gpg_socat_socket_var_run_t with a transition
###       to a private type.  This should be a gpg domain.
###	</p>
###	<p>
###	  Sockets created by socket_wrapper have predictable bases but varying
###	  stem.  SELinux policy does not support wildcards or regex in type
###	  transitions, so no name can be specified.
###	</p>
### </summary>
### <param name="domain">
###	<summary>
###	  Domain to permit create, transition, and delete.
###	</summary>
### </param>
### <param name="type">
###	<summary>
###	  Type of the sockets created.
###	</summary>
### </param>

interface(`gpg_socat_filetrans_gpg_socat_socket_var_run_sock_files',`

	# todo: Figure out how to define interfaces in templates

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`

			type gpg_socat_socket_var_run_t;
		')

		socat_qrexec_search_socat_qrexec_var_run($1)
		filetrans_pattern($1, gpg_socat_socket_var_run_t, $2, sock_file)
	')
')


###############################
## <summary>
##	Faux TCP template for gpg.
## </summary>
## <param name="prefix">
##	<summary>
##	  Prefix for the gpg wrapper domain
##	</summary>
## </param>
## <param name="gpg_domain">
##	<summary>
##	  gpg domain
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	  Domain from which to transition.
##	</summary>
## </param>
## <param name="role" optional="yes">
##	<summary>
##	  Role with which to assign type.
##	</summary>
## </param>

template(`gpg_socat_gpg_wrapper_template',`


	########################################
	#
	# Declarations
	#
	
	type $1_gpg_wrapper_t;
	type $1_gpg_wrapper_exec_t;
	domain_type($1_gpg_wrapper_t)
	domain_entry_file($1_gpg_wrapper_t, $1_gpg_wrapper_exec_t)

	type $1_gpg_socat_socket_var_run_t;
	files_type($1_gpg_socat_socket_var_run_t)

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`

			attribute gpg_faux_tcp_domain;
			attribute gpg_wrapper_domain;
			')

		typeattribute $1_gpg_wrapper_t gpg_wrapper_domain;
		typeattribute $2 gpg_faux_tcp_domain;
	')

	########################################
	#
	# $2 policy
	#
	
	# exe, ld, null, pts
	allow $2 $1_gpg_wrapper_t : fd use;
	allow $2 $1_gpg_wrapper_t : process sigchld;

	allow $2 $1_gpg_socat_socket_var_run_t : sock_file { create unlink write };

	optional_policy(`

		# Making this optional simply allows gpg_socat module to be
		# removed, altered, and reinstalled.

		gen_require(`

			type gpg_socat_socket_var_run_t;
		')

		gpg_socat_filetrans_gpg_socat_socket_var_run_sock_files($2, $1_gpg_socat_socket_var_run_t)
	')

	########################################
	#
	# $1_gpg_wrapper_t policy
	#

	# pts, exe, ld
	allow $1_gpg_wrapper_t $3 : fd use;
	allow $1_gpg_wrapper_t $3 : process sigchld;

	# A wrapper avoids giving another domain noatsecure.
	#
	optional_policy(`

		# Making this optional simply allows socket_wrapper module to be
		# removed, altered, and reinstalled.

		gen_require(`

			type socket_wrapper_lib_t;
		')

		socket_wrapper_preload_socket_wrapper_lib_files($2, $1_gpg_wrapper_t)
	')

	########################################
	#
	# $3 policy
	#

	domain_auto_transition_pattern($3, $1_gpg_wrapper_exec_t, $1_gpg_wrapper_t) 

	########################################
	#
	# $4 policy
	#

	optional_policy(`

		gen_require(`

			role $4;
		')

		role $4 types { $2 $1_gpg_wrapper_t };
	')
')
